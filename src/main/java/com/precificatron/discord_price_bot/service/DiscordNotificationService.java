package com.precificatron.discord_price_bot.service;

import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.entities.User;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.exceptions.ErrorResponseException;
import net.dv8tion.jda.api.requests.ErrorResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;

@Service
public class DiscordNotificationService {

    private final JDA jda;

    @Value("${discord.channel.id}")
    private long channelId;

    // A propriedade userId √© opcional. Se n√£o for encontrada, o valor padr√£o ser√° -1.
    @Value("${discord.user.id:-1}")
    private long userId;

    /**
     * Construtor para inje√ß√£o de depend√™ncia.
     * O Spring automaticamente fornecer√° o Bean JDA que criamos.
     */
    public DiscordNotificationService(JDA jda) {
        this.jda = jda;
    }

    /**
     * Envia um alerta de promo√ß√£o para um canal de texto p√∫blico configurado.
     */
    public void sendPublicPromotionAlert(BigDecimal newPrice, BigDecimal oldPrice, String productUrl) {
        TextChannel channel = jda.getTextChannelById(channelId);
        if (channel != null) {
            String message = createPromotionMessage(newPrice, oldPrice, productUrl);
            channel.sendMessage(message).queue(); // Enfileira a mensagem para ser enviada
            System.out.println("Notifica√ß√£o de promo√ß√£o enviada para o canal #" + channel.getName());
        } else {
            System.err.println("ERRO: Canal do Discord com ID " + channelId + " n√£o foi encontrado.");
        }
    }

    /**
     * Envia um alerta de promo√ß√£o por mensagem direta (DM) para um usu√°rio espec√≠fico.
     * S√≥ tenta enviar se o userId estiver configurado no application.properties.
     */
    public void sendPrivatePromotionAlert(BigDecimal newPrice, BigDecimal oldPrice, String productUrl) {
        if (userId == -1) {
            System.out.println("ID de usu√°rio para DM n√£o configurado. Pulando notifica√ß√£o privada.");
            return; // Interrompe a execu√ß√£o se n√£o houver ID de usu√°rio
        }

        jda.retrieveUserById(userId).queue(user -> {
            user.openPrivateChannel().queue(privateChannel -> {
                String message = createPromotionMessage(newPrice, oldPrice, productUrl);
                privateChannel.sendMessage(message).queue(
                        success -> System.out.println("DM de promo√ß√£o enviada com sucesso para " + user.getName()),
                        failure -> handleDmFailure(failure, user)
                );
            });
        }, failure -> System.err.println("ERRO: N√£o foi poss√≠vel encontrar o usu√°rio com ID " + userId));
    }

    /**
     * M√©todo auxiliar privado para criar o texto da mensagem.
     * Evita duplica√ß√£o de c√≥digo e formata a mensagem de forma inteligente.
     */
    private String createPromotionMessage(BigDecimal newPrice, BigDecimal oldPrice, String productUrl) {
        // Se o pre√ßo antigo for nulo (primeira execu√ß√£o), exibe "N/A".
        // Caso contr√°rio, formata o pre√ßo com duas casas decimais.
        String oldPriceText = (oldPrice == null) ? "N/A" : String.format("R$ %.2f", oldPrice);

        return String.format(
                """
                        @everyone\s
                üéâ **ALERTA DE PROMO√á√ÉO!** üéâ
                
                O pre√ßo do produto baixou!
                
                **Pre√ßo Anterior:** %s
                **Novo Pre√ßo:** **R$ %.2f**
                
                Corre pra ver! ‚û°Ô∏è %s
                """, oldPriceText, newPrice, productUrl
        );
    }

    /**
     * M√©todo auxiliar para tratar erros comuns ao enviar DMs.
     */
    private void handleDmFailure(Throwable failure, User user) {
        if (failure instanceof ErrorResponseException e && e.getErrorResponse() == ErrorResponse.CANNOT_SEND_TO_USER) {
            System.err.println("Falha ao enviar DM: O usu√°rio " + user.getName() + " provavelmente tem DMs bloqueadas.");
        } else {
            System.err.println("Falha ao enviar DM para " + user.getName() + ": " + failure.getMessage());
        }
    }
}